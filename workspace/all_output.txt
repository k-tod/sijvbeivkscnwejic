Based on the requirements, we will need the following core classes and functions:

1. `CarComponent`: A class to represent a car component. It will have attributes such as `name` and `uid`.

2. `CarModel`: A class to represent a car model. It will have attributes such as `name`, `common_components` (a list of `CarComponent` objects), and `unique_components` (a list of `CarComponent` objects).

3. `load_yaml`: A function to load the yaml file and return a list of `CarModel` objects.

4. `generate_xml`: A function to generate an xml file for each `CarModel` object.

5. `main`: The entry point of the script. It will call `load_yaml` to get the list of `CarModel` objects, and then call `generate_xml` for each `CarModel` object.

Now, let's write the code for each file.

requirements.txt
```txt
pyyaml
lxml
uuid
```

car_component.py
```python
import uuid

class CarComponent:
    def __init__(self, name, uid=None):
        self.name = name
        self.uid = uid if uid else str(uuid.uuid4())
```

car_model.py
```python
from car_component import CarComponent

class CarModel:
    def __init__(self, name, common_components, unique_components):
        self.name = name
        self.common_components = [CarComponent(**component) for component in common_components]
        self.unique_components = [CarComponent(**component) for component in unique_components]
```

load_yaml.py
```python
import yaml
from car_model import CarModel

def load_yaml(file_path):
    with open(file_path, 'r') as file:
        data = yaml.safe_load(file)
    return [CarModel(**model) for model in data]
```

generate_xml.py
```python
from lxml import etree

def generate_xml(car_model, output_folder):
    root = etree.Element('car_model', name=car_model.name)
    for component in car_model.common_components + car_model.unique_components:
        etree.SubElement(root, 'component', name=component.name, uid=component.uid)
    tree = etree.ElementTree(root)
    tree.write(f'{output_folder}/{car_model.name}.xml', pretty_print=True)
```

main.py
```python
import os
from load_yaml import load_yaml
from generate_xml import generate_xml

def main(yaml_file_path, output_folder):
    car_models = load_yaml(yaml_file_path)
    os.makedirs(output_folder, exist_ok=True)
    for car_model in car_models:
        generate_xml(car_model, output_folder)

if __name__ == '__main__':
    main('car_models.yaml', 'output')
```

This script will generate an xml file for each car model in the yaml file, with each component represented as a child element of the car model element. The uid of each component is either provided in the yaml file or randomly generated. The xml files are saved in the specified output folder.