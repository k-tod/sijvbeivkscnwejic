[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the right decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}}}, {"type": "ai", "data": {"content": "Instructions:\n\n1. Read the list of super short bullets.\n2. Identify areas that need clarification.\n3. Summarize these areas.\n4. Choose one clarifying question.\n5. Wait for an answer from the user.\n\nPlease provide the list of super short bullets for me to proceed.", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "Make your own assumptions and state them explicitly before starting", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "To clarify, are you asking me to make assumptions about the context or content of the list of super short bullets before I begin analyzing them?", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "Think step by step and reason yourself to the right decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nThen you will output the content of each file including ALL code.\nEach file must strictly follow a markdown code block format, where the following tokens must be replaced such that\nFILENAME is the lowercase file name including the file extension,\nLANG is the markup code block language for the code's language, and CODE is the code:\n\nFILENAME\n```LANG\nCODE\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Based on the instructions, it seems like we are to create a Python project with multiple files, each containing classes, functions, and methods. The project should be fully functional and follow best practices for Python programming and file structure. \n\nAssumptions:\n1. The project will be a simple command-line application.\n2. The application will perform basic arithmetic operations (addition, subtraction, multiplication, and division).\n3. The application will be structured in an Object-Oriented Programming (OOP) style.\n4. The application will use Python 3.\n\nCore Classes, Functions, and Methods:\n1. `Calculator`: This is the main class that will contain methods for each arithmetic operation.\n2. `add`: This method will add two numbers.\n3. `subtract`: This method will subtract one number from another.\n4. `multiply`: This method will multiply two numbers.\n5. `divide`: This method will divide one number by another.\n6. `main`: This is the entry point function that will handle user input and output.\n\nNow, let's create the files and their content.\n\nmain.py\n```python\nfrom calculator import Calculator\n\ndef main():\n    calculator = Calculator()\n    while True:\n        print(\"\\n1. Add\")\n        print(\"2. Subtract\")\n        print(\"3. Multiply\")\n        print(\"4. Divide\")\n        print(\"5. Exit\")\n        choice = int(input(\"Enter your choice: \"))\n        if choice == 5:\n            break\n        num1 = int(input(\"Enter first number: \"))\n        num2 = int(input(\"Enter second number: \"))\n        if choice == 1:\n            print(\"Result: \", calculator.add(num1, num2))\n        elif choice == 2:\n            print(\"Result: \", calculator.subtract(num1, num2))\n        elif choice == 3:\n            print(\"Result: \", calculator.multiply(num1, num2))\n        elif choice == 4:\n            print(\"Result: \", calculator.divide(num1, num2))\n\nif __name__ == \"__main__\":\n    main()\n```\n\ncalculator.py\n```python\nclass Calculator:\n    def add(self, num1, num2):\n        return num1 + num2\n\n    def subtract(self, num1, num2):\n        return num1 - num2\n\n    def multiply(self, num1, num2):\n        return num1 * num2\n\n    def divide(self, num1, num2):\n        if num2 != 0:\n            return num1 / num2\n        else:\n            return \"Cannot divide by zero!\"\n```\n\nrequirements.txt\n```\n# No external dependencies\n```\n\nThis is a simple command-line calculator application in Python. The `Calculator` class is defined in `calculator.py` and contains methods for addition, subtraction, multiplication, and division. The `main` function in `main.py` is the entry point of the application. It creates an instance of the `Calculator` class and uses it to perform operations based on user input. The application continues to run and ask for user input until the user chooses to exit. The `requirements.txt` file is included but is empty because this application does not require any external dependencies.", "additional_kwargs": {}, "example": false}}]